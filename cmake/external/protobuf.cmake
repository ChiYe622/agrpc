include(ExternalProject)

set(PROTOBUF_PREFIX_DIR ${THIRD_PARTY_PATH}/protobuf)
set(PROTOBUF_SOURCE_DIR ${THIRD_PARTY_PATH}/protobuf/src/extern_protobuf)
set(PROTOBUF_INSTALL_DIR ${THIRD_PARTY_PATH}/install/protobuf)
set(PROTOBUF_INCLUDE_DIR
    "${PROTOBUF_INSTALL_DIR}/include"
    CACHE PATH "protobuf include directory." FORCE)
set(PROTOBUF_REPOSITORY ${GIT_URL}/protocolbuffers/protobuf.git)
set(PROTOBUF_TAG v3.17.3)

set(PROTOBUF_LITE_LIBRARY
    "${PROTOBUF_INSTALL_DIR}/lib/libprotobuf-lite${CMAKE_STATIC_LIBRARY_SUFFIX}"
    CACHE FILEPATH "protobuf lite library." FORCE)
set(PROTOBUF_LIBRARY
    "${PROTOBUF_INSTALL_DIR}/lib/libprotobuf${CMAKE_STATIC_LIBRARY_SUFFIX}"
    CACHE FILEPATH "protobuf library." FORCE)
set(PROTOBUF_PROTOC_LIBRARY
    "${PROTOBUF_INSTALL_DIR}/lib/libprotoc${CMAKE_STATIC_LIBRARY_SUFFIX}"
    CACHE FILEPATH "protobuf protoc library." FORCE)
set(PROTOBUF_PROTOC_EXECUTABLE
    "${PROTOBUF_INSTALL_DIR}/bin/protoc${CMAKE_EXECUTABLE_SUFFIX}"
    CACHE FILEPATH "protobuf protoc executable." FORCE)

include_directories(${PROTOBUF_INCLUDE_DIR})

cache_third_party(
  extern_protobuf
  REPOSITORY
  ${PROTOBUF_REPOSITORY}
  TAG
  ${PROTOBUF_TAG}
  DIR
  PROTOBUF_SOURCE_DIR)

set(OPTIONAL_CACHE_ARGS "-DZLIB_ROOT:STRING=${ZLIB_ROOT}")
set(OPTIONAL_ARGS
    "-DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}"
    "-DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}"
    "-DCMAKE_C_FLAGS=${CMAKE_C_FLAGS}"
    "-DCMAKE_C_FLAGS_DEBUG=${CMAKE_C_FLAGS_DEBUG}"
    "-DCMAKE_C_FLAGS_RELEASE=${CMAKE_C_FLAGS_RELEASE}"
    "-DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}"
    "-DCMAKE_CXX_FLAGS_RELEASE=${CMAKE_CXX_FLAGS_RELEASE}"
    "-DCMAKE_CXX_FLAGS_DEBUG=${CMAKE_CXX_FLAGS_DEBUG}"
    "-Dprotobuf_WITH_ZLIB=ON"
    "-DZLIB_ROOT:FILEPATH=${ZLIB_ROOT}"
    ${EXTERNAL_OPTIONAL_ARGS})
if(WIN32)
  set(OPTIONAL_ARGS
      ${OPTIONAL_ARGS} "-DCMAKE_GENERATOR=${CMAKE_GENERATOR}"
      "-DCMAKE_GENERATOR_PLATFORM=${CMAKE_GENERATOR_PLATFORM}"
      "-Dprotobuf_MSVC_STATIC_RUNTIME=${MSVC_STATIC_CRT}")
endif()

ExternalProject_Add(
  extern_protobuf
  ${EXTERNAL_PROJECT_LOG_ARGS} ${SHALLOW_CLONE} ${PROTOBUF_DOWNLOAD_CMD}
  DEPENDS zlib
  PREFIX ${PROTOBUF_PREFIX_DIR}
  SOURCE_DIR ${PROTOBUF_SOURCE_DIR}
  CONFIGURE_COMMAND
    ${CMAKE_COMMAND} ${PROTOBUF_SOURCE_DIR}/cmake ${OPTIONAL_ARGS}
    -Dprotobuf_BUILD_TESTS=OFF -DCMAKE_SKIP_RPATH=ON
    -DCMAKE_POSITION_INDEPENDENT_CODE=ON
    -DCMAKE_BUILD_TYPE=${THIRD_PARTY_BUILD_TYPE}
    -DCMAKE_INSTALL_PREFIX=${PROTOBUF_INSTALL_DIR} -DCMAKE_INSTALL_LIBDIR=lib
    -DBUILD_SHARED_LIBS=OFF
  CMAKE_CACHE_ARGS
    -DCMAKE_INSTALL_PREFIX:PATH=${PROTOBUF_INSTALL_DIR}
    -DCMAKE_BUILD_TYPE:STRING=${THIRD_PARTY_BUILD_TYPE}
    -DCMAKE_VERBOSE_MAKEFILE:BOOL=OFF
    -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
    ${OPTIONAL_CACHE_ARGS}
  BUILD_BYPRODUCTS
    ${PROTOBUF_INSTALL_DIR}/lib/libprotobuf${CMAKE_STATIC_LIBRARY_SUFFIX}
  BUILD_BYPRODUCTS
    ${PROTOBUF_INSTALL_DIR}/lib/libprotobuf-lite${CMAKE_STATIC_LIBRARY_SUFFIX}
  BUILD_BYPRODUCTS
    ${PROTOBUF_INSTALL_DIR}/lib/libprotoc${CMAKE_STATIC_LIBRARY_SUFFIX}
  BUILD_BYPRODUCTS ${PROTOBUF_INSTALL_DIR}/bin/protoc${CMAKE_EXECUTABLE_SUFFIX})

# Assuming that all the protobuf libraries are of the same type.
if(${PROTOBUF_LIBRARY} MATCHES ${CMAKE_STATIC_LIBRARY_SUFFIX})
  set(protobuf_LIBTYPE STATIC)
elseif(${PROTOBUF_LIBRARY} MATCHES "${CMAKE_SHARED_LIBRARY_SUFFIX}$")
  set(protobuf_LIBTYPE SHARED)
else()
  message(FATAL_ERROR "Unknown library type: ${PROTOBUF_LIBRARY}")
endif()

add_library(protobuf ${protobuf_LIBTYPE} IMPORTED GLOBAL)
set_property(TARGET protobuf PROPERTY IMPORTED_LOCATION ${PROTOBUF_LIBRARY})

add_library(protobuf_lite ${protobuf_LIBTYPE} IMPORTED GLOBAL)
set_property(TARGET protobuf_lite PROPERTY IMPORTED_LOCATION
                                           ${PROTOBUF_LITE_LIBRARY})

add_library(libprotoc ${protobuf_LIBTYPE} IMPORTED GLOBAL)
set_property(TARGET libprotoc PROPERTY IMPORTED_LOCATION ${PROTOC_LIBRARY})

add_executable(protoc IMPORTED GLOBAL)
set_property(TARGET protoc PROPERTY IMPORTED_LOCATION
                                    ${PROTOBUF_PROTOC_EXECUTABLE})
# FIND_Protobuf.cmake uses `Protobuf_PROTOC_EXECUTABLE`. make
# `protobuf_generate_cpp` happy.
set(Protobuf_PROTOC_EXECUTABLE ${PROTOBUF_PROTOC_EXECUTABLE})

add_dependencies(protobuf extern_protobuf)
add_dependencies(protobuf_lite extern_protobuf)
add_dependencies(libprotoc extern_protobuf)
add_dependencies(protoc extern_protobuf)
